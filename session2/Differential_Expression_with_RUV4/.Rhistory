library(ruv)            ## for applying RUV methods
library(limma)          ## for vennDiagram()
library(ggplot2)        ## for data visualisation
datasetA<- read.table("expr_10data_datasetA.txt", header = T, sep = "\t")
datasetB<- read.table("expr_10data_datasetB.txt", header = T, sep = "\t")
head(datasetA,3)
head(datasetB,3)
mA<-datasetA[,2:dim(datasetA)[2]]
mB<-datasetB[,2:dim(datasetB)[2]]
row.names(mA)<- datasetA[,1]
row.names(mB)<- datasetB[,1]
mA<- as.matrix(mA)
mB<- as.matrix(mB)
info_datasetA<- read.table("info_10data_datasetA.txt", sep="\t", header=T)
info_datasetA
info_datasetB<- read.table("info_10data_datasetB.txt", sep="\t", header=T)
info_datasetB
## Transpose the expression matrix so that we have genes in columns and dataset in rows
YA <- t(mA)
## Plot RLE coloured by study
ruv_rle(YA, info_datasetA$study, ylim = c(-5,5))
## Plot RLE coloured by platform
ruv_rle(YA, info_datasetA$platform, ylim = c(-5,5))
## Plot RLE coloured by platform
ruv_rle(YA, info_datasetA$tissue, ylim = c(-5,5))
YB <- t(mB)
## Plot RLE coloured by study
ruv_rle(YB, info_datasetB$study, ylim = c(-5,5))
## Plot RLE coloured by platform
ruv_rle(YB, info_datasetB$platform, ylim = c(-5,5))
## Plot RLE coloured by tissue
ruv_rle(YB, info_datasetB$tissue, ylim = c(-5,5))
gg_additions <- list(aes(color = info_datasetA$study,
shape = info_datasetA$treatment,
size = 5, alpha = .7),
labs(color = "Study", shape="Treatment"),
scale_size_identity(guide = "none"),
scale_alpha(guide = "none"),
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16)),
guides(color = guide_legend(override.aes = list(size = 4)),
shape = guide_legend(override.aes = list(size = 4))))
options(repr.plot.width = 8, repr.plot.height = 6)
ruv_svdplot(YA) + gg_additions
gg_additions <- list(aes(color = info_datasetB$study,
shape = info_datasetB$treatment,
size = 5, alpha = .7),
labs(color = "Study",shape = "Treatment"),
scale_size_identity(guide = "none"),
scale_alpha(guide = "none"),
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16)),
guides(color = guide_legend(override.aes = list(size = 4)),
shape = guide_legend(override.aes = list(size = 4))))
options(repr.plot.width=8, repr.plot.height=6)
ruv_svdplot(YB) + gg_additions #
HKgenes <- read.table("HouseKeeping_genes_IDs.txt", header=T, sep="\t")
hk <- HKgenes$GeneID
ctrl <- colnames(YA) %in% hk
head(ctrl)
## Take treatment as the biological factor of interest in data set A
groups_A <- factor(info_datasetA$treatment)
gA <- cbind(as.numeric(groups_A))   ## 1 control, 2: TGFb
## Take treatment as the biological factor of interest in data set B
groups_B <- factor(info_datasetB$treatment)
gB <- cbind(as.numeric(groups_B))   ## 1 control, 2: TGFb
## Select different values of k
ks <- c(0, 1, 2, 5, 6, 7, 8, 10, 11, 12, 15, 18, 20, 22, 23, 24)
## Define empty vector and lists and use them in the for loop to store the results
# beta_corAB_HK <- vector()
fit_ruv4_hk_datasetA_all_k <- list()
fit_ruv4_hk_datasetA_all_k.summary <- list()
fit_ruv4_hk_datasetB_all_k <- list()
fit_ruv4_hk_datasetB_all_k.summary <- list()
for (K in ks){
fit_ruv4_hk_datasetA_all_k[[K]] <- RUV4(YA, X = gA,
ctl = ctrl,
k = K,Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetA_all_k.summary[[K]] <- ruv_summary(YA,
fit_ruv4_hk_datasetA_all_k[[K]],
info_datasetA)
fit_ruv4_hk_datasetB_all_k[[K]] <- RUV4(YB, X = gB,
ctl = ctrl,
k = K,Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetB_all_k.summary[[K]] <- ruv_summary(YB,
fit_ruv4_hk_datasetB_all_k[[K]],
info_datasetB)
# currentCor <- cor.test(fit_ruv4_hk_datasetA_all_k[[K]]$betahat,
#                       fit_ruv4_hk_datasetB_all_k[[K]]$betahat)$estimate
# beta_corAB_HK <- c(beta_corAB_HK, currentCor)
plot(fit_ruv4_hk_datasetA_all_k[[K]]$betahat,
fit_ruv4_hk_datasetB_all_k[[K]]$betahat,
xlab = "Betahat dataset A",
ylab = "Betahat dataset B",
main = paste("RUV4_K_", K, sep=""),
xlim = c(-3,3), cex = 0.3, ylim = c(-4,4))
#abline(fit_ruv4_emp_datasetB$betahat,fit_ruv4_emp_datasetA$betahat)
corVal <- cor.test(fit_ruv4_hk_datasetA_all_k[[K]]$betahat, fit_ruv4_hk_datasetB_all_k[[K]]$betahat)$estimate
text(-3,3, pos=4, paste("Correlation: ", round(corVal,2),sep=""))
}
## Take treatment as the biological factor of interest in data set A
groups_A <- factor(info_datasetA$treatment)
gA <- cbind(as.numeric(groups_A))   ## 1 control, 2: TGFb
## Take treatment as the biological factor of interest in data set B
groups_B <- factor(info_datasetB$treatment)
gB <- cbind(as.numeric(groups_B))   ## 1 control, 2: TGFb
## Select different values of k
ks <- c(0, 1, 2, 5, 6, 7, 8, 10, 11, 12, 15, 18, 20, 22, 23, 24)
## Define empty vector and lists and use them in the for loop to store the results
# beta_corAB_HK <- vector()
fit_ruv4_hk_datasetA_all_k <- list()
fit_ruv4_hk_datasetA_all_k.summary <- list()
fit_ruv4_hk_datasetB_all_k <- list()
fit_ruv4_hk_datasetB_all_k.summary <- list()
for (K in ks){
fit_ruv4_hk_datasetA_all_k[[K]] <- RUV4(YA, X = gA,
ctl = ctrl,
k = K,Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetA_all_k.summary[[K]] <- ruv_summary(YA,
fit_ruv4_hk_datasetA_all_k[[K]],
info_datasetA)
fit_ruv4_hk_datasetB_all_k[[K]] <- RUV4(YB, X = gB,
ctl = ctrl,
k = K,Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetB_all_k.summary[[K]] <- ruv_summary(YB,
fit_ruv4_hk_datasetB_all_k[[K]],
info_datasetB)
# currentCor <- cor.test(fit_ruv4_hk_datasetA_all_k[[K]]$betahat,
#                       fit_ruv4_hk_datasetB_all_k[[K]]$betahat)$estimate
# beta_corAB_HK <- c(beta_corAB_HK, currentCor)
}
## Select different values of k
ks <- c(0, 1, 2, 5, 6, 7, 8, 10, 11, 12, 15, 18, 20, 22, 23, 24)
## Define empty vector and lists and use them in the for loop to store the results
# beta_corAB_HK <- vector()
fit_ruv4_hk_datasetA_all_k <- list()
fit_ruv4_hk_datasetA_all_k.summary <- list()
fit_ruv4_hk_datasetB_all_k <- list()
fit_ruv4_hk_datasetB_all_k.summary <- list()
K = 0
fit_ruv4_hk_datasetA_all_k[[K]] <- RUV4(YA, X = gA,
ctl = ctrl,
k = K, Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
ks <- c( 1, 2, 5, 6, 7, 8, 10, 11, 12, 15, 18, 20, 22, 23, 24)
## Define empty vector and lists and use them in the for loop to store the results
# beta_corAB_HK <- vector()
fit_ruv4_hk_datasetA_all_k <- list()
fit_ruv4_hk_datasetA_all_k.summary <- list()
fit_ruv4_hk_datasetB_all_k <- list()
fit_ruv4_hk_datasetB_all_k.summary <- list()
for (K in ks){
fit_ruv4_hk_datasetA_all_k[[K]] <- RUV4(YA, X = gA,
ctl = ctrl,
k = K, Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetA_all_k.summary[[K]] <- ruv_summary(YA,
fit_ruv4_hk_datasetA_all_k[[K]],
info_datasetA)
fit_ruv4_hk_datasetB_all_k[[K]] <- RUV4(YB, X = gB,
ctl = ctrl,
k = K,Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetB_all_k.summary[[K]] <- ruv_summary(YB,
fit_ruv4_hk_datasetB_all_k[[K]],
info_datasetB)
# currentCor <- cor.test(fit_ruv4_hk_datasetA_all_k[[K]]$betahat,
#                       fit_ruv4_hk_datasetB_all_k[[K]]$betahat)$estimate
# beta_corAB_HK <- c(beta_corAB_HK, currentCor)
}
length(fit_ruv4_hk_datasetA_all_k)
## Take treatment as the biological factor of interest in data set A
groups_A <- factor(info_datasetA$treatment)
gA <- cbind(as.numeric(groups_A))   ## 1 control, 2: TGFb
## Take treatment as the biological factor of interest in data set B
groups_B <- factor(info_datasetB$treatment)
gB <- cbind(as.numeric(groups_B))   ## 1 control, 2: TGFb
## Select different values of k
ks <- c( 1, 2, 5, 6, 7, 8, 10, 11, 12, 15, 18, 20, 22, 23, 24)
## Define empty vector and lists and use them in the for loop to store the results
# beta_corAB_HK <- vector()
fit_ruv4_hk_datasetA_all_k <- list()
fit_ruv4_hk_datasetA_all_k.summary <- list()
fit_ruv4_hk_datasetB_all_k <- list()
fit_ruv4_hk_datasetB_all_k.summary <- list()
for (K in ks){
fit_ruv4_hk_datasetA_all_k[[K]] <- RUV4(YA, X = gA,
ctl = ctrl,
k = K, Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetA_all_k.summary[[K]] <- ruv_summary(YA,
fit_ruv4_hk_datasetA_all_k[[K]],
info_datasetA)
fit_ruv4_hk_datasetB_all_k[[K]] <- RUV4(YB, X = gB,
ctl = ctrl,
k = K,Z = 1, eta = NULL,
fullW0 = NULL, inputcheck = TRUE)
fit_ruv4_hk_datasetB_all_k.summary[[K]] <- ruv_summary(YB,
fit_ruv4_hk_datasetB_all_k[[K]],
info_datasetB)
# currentCor <- cor.test(fit_ruv4_hk_datasetA_all_k[[K]]$betahat,
#                       fit_ruv4_hk_datasetB_all_k[[K]]$betahat)$estimate
# beta_corAB_HK <- c(beta_corAB_HK, currentCor)
plot(fit_ruv4_hk_datasetA_all_k[[K]]$betahat,
fit_ruv4_hk_datasetB_all_k[[K]]$betahat,
xlab = "Betahat dataset A",
ylab = "Betahat dataset B",
main = paste("RUV4_K_", K, sep=""),
xlim = c(-3,3), cex = 0.3, ylim = c(-4,4))
#abline(fit_ruv4_emp_datasetB$betahat,fit_ruv4_emp_datasetA$betahat)
corVal <- cor.test(fit_ruv4_hk_datasetA_all_k[[K]]$betahat,
fit_ruv4_hk_datasetB_all_k[[K]]$betahat)$estimate
text(-3,3, pos=4, paste("Correlation: ", round(corVal,2),sep=""))
}
# names(beta_corAB_HK) <- ks
# data.frame(beta_corAB_HK) ## K = 23 seems a good choice
# RUV4 with k = 0 for no adjustment
#----- In dataset A data
fit_unadj_hk_datasetA <- RUV4(YA, X = gA,
ctl = ctrl,
k = 0)
fit_unadj_hk_datasetA.summary <- ruv_summary(YA,
fit_unadj_hk_datasetA,
info_datasetA)
##----- In dataset B data
fit_unadj_hk_datasetB <- RUV4(YB, X = gB,
ctl = ctrl,
k = 0)
fit_unadj_hk_datasetB.summary <- ruv_summary(YB,
fit_unadj_hk_datasetB,
info_datasetB)
##----- Unadjusted data sets
plot(fit_unadj_hk_datasetA$betahat,
fit_unadj_hk_datasetB$betahat,
xlab = "Betahat dataset A",
ylab = "Betahat dataset B",
main = "Unadjusted",
xlim = c(-3,3), cex = 0.3, ylim = c(-4,4))
corVal <- cor.test(fit_unadj_hk_datasetA$betahat, fit_unadj_hk_datasetB$betahat)$estimate
text(-3,3, pos = 4, paste("Correlation: ", round(corVal,2), sep = ""))
## We select K = 23
K = 23
##----- In data A
ruv_hist(fit_unadj_hk_datasetA.summary) + ggtitle("Unadj_A")
ruv_hist(fit_ruv4_hk_datasetA_all_k.summary[[K]]) + ggtitle("RUV4_HK_A")
## ---- In data B
ruv_hist(fit_unadj_hk_datasetB.summary) + ggtitle("Unadj_B")
ruv_hist(fit_ruv4_hk_datasetB_all_k.summary[[K]]) + ggtitle("RUV4_HK_B")
allDEGs_unadj <- c(DEGsUnadj_datasetA,
DEGsUnadj_datasetB)
##------ Define DEGs in the unadjusted data set A
DEGsUnadj_datasetA <- row.names(fit_unadj_hk_datasetA.summary$C)[fit_unadj_hk_datasetA.summary$C$F.p.BH < 0.05 & abs(fit_unadj_hk_datasetA.summary$C$b_X1) > 1]
##------ Define DEGs in the unadjusted data set B
DEGsUnadj_datasetB <- row.names(fit_unadj_hk_datasetB.summary$C)[fit_unadj_hk_datasetB.summary$C$F.p.BH < 0.05 & abs(fit_unadj_hk_datasetB.summary$C$b_X1) > 1]
##------ Explore how many genes are overlapping between data sets A and B
allDEGs_unadj <- c(DEGsUnadj_datasetA,
DEGsUnadj_datasetB)
## remove duplicated gene symbols:
allDEGs_unadj <- allDEGs_unadj[!duplicated(allDEGs_unadj)]
## Draw a Venn diagram comparing DEGs for RUVinv
Counts_unadj <- matrix(0, nrow = length(allDEGs_unadj), ncol = 2)
row.names(Counts_unadj)<- allDEGs_unadj
colnames(Counts_unadj)<- c("Unadj_A","Unadj_B")
for( i in 1:length(allDEGs_unadj)) {
Counts_unadj[i,1]<- allDEGs_unadj[i] %in% DEGsUnadj_datasetA
Counts_unadj[i,2]<- allDEGs_unadj[i] %in% DEGsUnadj_datasetB
}
col <- c("blue", "violet")
vennDiagram(vennCounts(Counts_unadj),
circle.col = col,
cex = c(1.6, 1.2, 1), lwd=2)
DEGsRUV4_datasetA_all_k <- list()
for (K in ks){
DEGsRUV4_datasetA_all_k[[K]] <- row.names(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C)[fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$F.p.BH < 0.05 & abs(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$b_X1) > 1]
}
DEGsRUV4_datasetB_all_k <- list()
for (K in ks){
DEGsRUV4_datasetB_all_k[[K]] <- row.names(fit_ruv4_hk_datasetB_all_k.summary[[K]]$C)[fit_ruv4_hk_datasetB_all_k.summary[[K]]$C$F.p.BH < 0.05 & abs(fit_ruv4_hk_datasetB_all_k.summary[[K]]$C$b_X1) > 1]
}
# allDEGs_RUV4<- c(DEGsRUV4_datasetA, DEGsRUV4_datasetB)
# ## remove duplicated gene symbols:
# allDEGs_RUV4<- allDEGs_RUV4[!duplicated(allDEGs_RUV4)]
# ## Draw a Venn diagram comparing DEGs for RUV4
# Counts_RUV4 <- matrix(0, nrow= length(allDEGs_RUV4), ncol=2)
# row.names(Counts_RUV4)<- allDEGs_RUV4
# colnames(Counts_RUV4)<- c("RUV4_A","RUV4_B")
#
# for( i in 1:length(allDEGs_RUV4)) {
#   Counts_RUV4[i,1]<- allDEGs_RUV4[i] %in% DEGsRUV4_datasetA
#   Counts_RUV4[i,2]<- allDEGs_RUV4[i] %in% DEGsRUV4_datasetB
# }
#
# col<- c("blue", "violet")
# vennDiagram(vennCounts(Counts_RUV4),
#             circle.col = col,
#             cex = c(1.6, 1.2, 1), lwd = 2)
allDEGs_RUV4_all_k <- list()
for (K in ks){
allDEGs_RUV4_all_k[[K]] <- c(DEGsRUV4_datasetA_all_k[[K]],
DEGsRUV4_datasetB_all_k[[K]])
## remove duplicated gene symbols:
allDEGs_RUV4_all_k[[K]] <- allDEGs_RUV4_all_k[[K]][!duplicated(allDEGs_RUV4_all_k[[K]])]
## Draw a Venn diagram comparing DEGs for RUV4
Counts_RUV4<- matrix(0, nrow = length(allDEGs_RUV4_all_k[[K]]), ncol=2)
row.names(Counts_RUV4) <- allDEGs_RUV4_all_k[[K]]
colnames(Counts_RUV4) <- c(paste("RUV4_A_K_", K, sep=""), paste("RUV4_B_K_",K,sep=""))
for( i in 1:length(allDEGs_RUV4_all_k[[K]])) {
Counts_RUV4[i,1]<- allDEGs_RUV4_all_k[[K]][i] %in% DEGsRUV4_datasetA_all_k[[K]]
Counts_RUV4[i,2]<- allDEGs_RUV4_all_k[[K]][i] %in% DEGsRUV4_datasetB_all_k[[K]]
}
col<- c("blue", "violet")
vennDiagram(vennCounts(Counts_RUV4),
circle.col = col,
cex = c(1.6, 1.2, 1), lwd = 2)
}
K = 23
##----- Define DEGs for the RUV4-adjusted data with K = 23 in data set A
DEGsRUV4_datasetA <- row.names(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C)[fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$F.p.BH < 0.05 & abs(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$b_X1) > 1]
##----- Look at the overalapping genes between unadjusted and RUV-4 adjusted data set A
allDEGs_datasetA <- c(DEGsUnadj_datasetA,
DEGsRUV4_datasetA_all_k[[K]])
## remove duplicated gene symbols:
allDEGs_datasetA <- allDEGs_datasetA[!duplicated(allDEGs_datasetA)]
## Draw a Venn diagram comparing DEGs for dataset A
Counts_datasetA <- matrix(0, nrow= length(allDEGs_datasetA), ncol=2)
row.names(Counts_datasetA)<- allDEGs_datasetA
colnames(Counts_datasetA)<- c("Unadj_A", "Ruv4_A_K_23")
for( i in 1:length(allDEGs_datasetA)) {
Counts_datasetA[i,1]<- allDEGs_datasetA[i] %in% DEGsUnadj_datasetA
Counts_datasetA[i,2]<- allDEGs_datasetA[i] %in% DEGsRUV4_datasetA_all_k[[K]]
}
col<- c("blue","darkgreen")
vennDiagram(vennCounts(Counts_datasetA),
circle.col=col,
cex=c(1.6, 1.2, 1), lwd=2)
##------ Define DEGs in the unadjusted data set A
DEGsUnadj_datasetA <- row.names(fit_unadj_hk_datasetA.summary$C)[fit_unadj_hk_datasetA.summary$C$F.p.BH < 0.05 & abs(fit_unadj_hk_datasetA.summary$C$b_X1) > 1]
##------ Define DEGs in the unadjusted data set B
DEGsUnadj_datasetB <- row.names(fit_unadj_hk_datasetB.summary$C)[fit_unadj_hk_datasetB.summary$C$F.p.BH < 0.05 & abs(fit_unadj_hk_datasetB.summary$C$b_X1) > 1]
##------ Explore how many genes are overlapping between data sets A and B
allDEGs_unadj <- c(DEGsUnadj_datasetA,
DEGsUnadj_datasetB)
## remove duplicated gene symbols:
allDEGs_unadj <- allDEGs_unadj[!duplicated(allDEGs_unadj)]
## Draw a Venn diagram comparing DEGs for RUVinv
Counts_unadj <- matrix(0, nrow = length(allDEGs_unadj), ncol = 2)
row.names(Counts_unadj)<- allDEGs_unadj
colnames(Counts_unadj)<- c("Unadj_A","Unadj_B")
for( i in 1:length(allDEGs_unadj)) {
Counts_unadj[i,1]<- allDEGs_unadj[i] %in% DEGsUnadj_datasetA
Counts_unadj[i,2]<- allDEGs_unadj[i] %in% DEGsUnadj_datasetB
}
col <- c("blue", "violet")
vennDiagram(vennCounts(Counts_unadj),
circle.col = col,
cex = c(1.6, 1.2, 1), lwd=2)
##---- Define DEGs for different values of k in data set A
DEGsRUV4_datasetA_all_k <- list()
for (K in ks){
DEGsRUV4_datasetA_all_k[[K]] <- row.names(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C)[fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$F.p.BH < 0.05 & abs(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$b_X1) > 1]
}
##---- Define DEGs for different values of k in data set B
DEGsRUV4_datasetB_all_k <- list()
for (K in ks){
DEGsRUV4_datasetB_all_k[[K]] <- row.names(fit_ruv4_hk_datasetB_all_k.summary[[K]]$C)[fit_ruv4_hk_datasetB_all_k.summary[[K]]$C$F.p.BH < 0.05 & abs(fit_ruv4_hk_datasetB_all_k.summary[[K]]$C$b_X1) > 1]
}
##---- Generate Venn diagrams, looking at the overlapping genes
##     between data sets A and B for different values of k
allDEGs_RUV4_all_k <- list()
for (K in ks){
allDEGs_RUV4_all_k[[K]] <- c(DEGsRUV4_datasetA_all_k[[K]],
DEGsRUV4_datasetB_all_k[[K]])
## remove duplicated gene symbols:
allDEGs_RUV4_all_k[[K]] <- allDEGs_RUV4_all_k[[K]][!duplicated(allDEGs_RUV4_all_k[[K]])]
## Draw a Venn diagram comparing DEGs for RUV4
Counts_RUV4<- matrix(0, nrow = length(allDEGs_RUV4_all_k[[K]]), ncol=2)
row.names(Counts_RUV4) <- allDEGs_RUV4_all_k[[K]]
colnames(Counts_RUV4) <- c(paste("RUV4_A_K_", K, sep=""), paste("RUV4_B_K_",K,sep=""))
for( i in 1:length(allDEGs_RUV4_all_k[[K]])) {
Counts_RUV4[i,1]<- allDEGs_RUV4_all_k[[K]][i] %in% DEGsRUV4_datasetA_all_k[[K]]
Counts_RUV4[i,2]<- allDEGs_RUV4_all_k[[K]][i] %in% DEGsRUV4_datasetB_all_k[[K]]
}
col<- c("blue", "violet")
vennDiagram(vennCounts(Counts_RUV4),
circle.col = col,
cex = c(1.6, 1.2, 1), lwd = 2)
}
K = 23
##----- Define DEGs for the RUV4-adjusted data with K = 23 in data set A
DEGsRUV4_datasetA <- row.names(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C)[fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$F.p.BH < 0.05 & abs(fit_ruv4_hk_datasetA_all_k.summary[[K]]$C$b_X1) > 1]
##----- Look at the overalapping genes between unadjusted and RUV-4 adjusted data set A
allDEGs_datasetA <- c(DEGsUnadj_datasetA,
DEGsRUV4_datasetA_all_k[[K]])
## remove duplicated gene symbols:
allDEGs_datasetA <- allDEGs_datasetA[!duplicated(allDEGs_datasetA)]
## Draw a Venn diagram comparing DEGs for dataset A
Counts_datasetA <- matrix(0, nrow= length(allDEGs_datasetA), ncol=2)
row.names(Counts_datasetA)<- allDEGs_datasetA
colnames(Counts_datasetA)<- c("Unadj_A", "Ruv4_A_K_23")
for( i in 1:length(allDEGs_datasetA)) {
Counts_datasetA[i,1]<- allDEGs_datasetA[i] %in% DEGsUnadj_datasetA
Counts_datasetA[i,2]<- allDEGs_datasetA[i] %in% DEGsRUV4_datasetA_all_k[[K]]
}
col<- c("blue","darkgreen")
vennDiagram(vennCounts(Counts_datasetA),
circle.col=col,
cex=c(1.6, 1.2, 1), lwd=2)
K = 23
##----- Define DEGs for the RUV4-adjusted data with K = 23 in data set B
DEGsRUV4_datasetB <- row.names(fit_ruv4_hk_datasetB_all_k.summary[[K]]$C)[fit_ruv4_hk_datasetB_all_k.summary[[K]]$C$F.p.BH < 0.05 & abs(fit_ruv4_hk_datasetB_all_k.summary[[K]]$C$b_X1) > 1]
##----- Look at the overalapping genes between unadjusted and RUV-4 adjusted data set B
allDEGs_datasetB <- c(DEGsUnadj_datasetB,
DEGsRUV4_datasetB_all_k[[K]])
## remove duplicated gene symbols:
allDEGs_datasetB <- allDEGs_datasetB[!duplicated(allDEGs_datasetB)]
## Draw a Venn diagram comparing DEGs for dataset B
Counts_datasetB <- matrix(0, nrow = length(allDEGs_datasetB), ncol = 2)
row.names(Counts_datasetB) <- allDEGs_datasetB
colnames(Counts_datasetB) <- c("Unadj_B", "Ruv4_B_K_23")
for( i in 1:length(allDEGs_datasetB)) {
Counts_datasetB[i,1]<- allDEGs_datasetB[i] %in% DEGsUnadj_datasetB
Counts_datasetB[i,2]<- allDEGs_datasetB[i] %in% DEGsRUV4_datasetB_all_k[[K]]
}
col <- c("blue", "darkgreen")
vennDiagram(vennCounts(Counts_datasetB),
circle.col = col,
cex = c(1.6, 1.2, 1), lwd = 2)
library(knitr)
kable(head(datasetA,3))
kabel(head(datasetB,3))
library(knitr)
?kabel
??kable
update.packages("knitr")
library(knitr)
kable(head(datasetA,3))
kable(head(datasetA,3))
kabel(head(datasetB,3))
kable(head(datasetA,3))
kable(head(datasetB,3))
mA<-datasetA[,2:dim(datasetA)[2]]
mB<-datasetB[,2:dim(datasetB)[2]]
row.names(mA)<- datasetA[,1]
row.names(mB)<- datasetB[,1]
mA<- as.matrix(mA)
mB<- as.matrix(mB)
kable(datasetA[1:3,1:4])
kable(datasetA[1:3,1:4])
mA<-datasetA[,2:dim(datasetA)[2]]
mB<-datasetB[,2:dim(datasetB)[2]]
row.names(mA)<- datasetA[,1]
row.names(mB)<- datasetB[,1]
mA<- as.matrix(mA)
mB<- as.matrix(mB)
kable(datasetA[1:3,1:8])
kable(datasetA[1:3,1:8])
mA<-datasetA[,2:dim(datasetA)[2]]
mB<-datasetB[,2:dim(datasetB)[2]]
row.names(mA)<- datasetA[,1]
row.names(mB)<- datasetB[,1]
mA<- as.matrix(mA)
mB<- as.matrix(mB)
kable(datasetA[1:3,1:4])
kable(datasetA[1:3,1:4])
mA<-datasetA[,2:dim(datasetA)[2]]
mB<-datasetB[,2:dim(datasetB)[2]]
row.names(mA)<- datasetA[,1]
row.names(mB)<- datasetB[,1]
mA<- as.matrix(mA)
mB<- as.matrix(mB)
kable(datasetA[1:4,1:4])
kable(datasetA[1:4,1:4])
mA<-datasetA[,2:dim(datasetA)[2]]
mB<-datasetB[,2:dim(datasetB)[2]]
row.names(mA)<- datasetA[,1]
row.names(mB)<- datasetB[,1]
mA<- as.matrix(mA)
mB<- as.matrix(mB)
info_datasetA <- read.table("info_10data_datasetA.txt", sep="\t", header=T)
kable(info_datasetA)
info_datasetB <- read.table("info_10data_datasetB.txt", sep="\t", header=T)
kable(info_datasetB)

---
title: "The RUV Package"
author: useR! 2018 Brisbane
output:
  github_document:
    toc: yes
  html_document:
    df_print: paged
---


```{r include=FALSE,echo=FALSE}
# Chunk options
knitr::opts_chunk$set(fig.width=8,echo=TRUE, fig.height=6, warning=FALSE, message=FALSE,prompt=T,tidy=T,include=TRUE,cache=FALSE)
```

# Looking to clean your data? Learn how to Remove Unwanted Variation with R

This notebook accompanies Session 1 Slides

```{r}
load("gender.rda")
ls()
# Y.raw:  Summarized by RMA, but otherwise not preprocessed
# Y.norm: Background corrected and quantile normalized
```

```{r}
Y = Y.norm
Y[1:5, 1:5]
```

```{r}
head(sampleinfo)
head(geneinfo)
```

```{r}
# Load the ruv package
library(ruv)
# Graphics 
library(ggplot2)
library(gridExtra)
gg_additions = list(aes(color=sampleinfo$region, 
                        shape=sampleinfo$lab, 
                        size=5, alpha=.7), 
                    labs(color="Brain Region", 
                         shape="Laboratory"),
                    scale_size_identity(guide="none"),
                    scale_alpha(guide="none"),
                    theme(legend.text=element_text(size=12),
                          legend.title=element_text(size=16)),
                    guides(color = guide_legend(override.aes = list(size = 4)),
                           shape = guide_legend(override.aes = list(size = 4))),
                    scale_color_manual(values=c("darkorchid3", "darkorange2", "dodgerblue3"))
                   ) 
options(repr.plot.width=8, repr.plot.height=6)
```


```{r}
ruv_svdplot(Y) + gg_additions # Technical note: centers columns by default

ruv_svdplot(residop(scale(Y,scale=FALSE), svd(scale(Y,scale=FALSE))$u[,1:5])) + gg_additions

ruv_svdplot(RUVIII(Y, replicate.matrix(sampleinfo[,c("patient", "region")]), geneinfo$spikectl, k=10)) + gg_additions
```


# Example Analysis (Regression)

```{r}
fit = RUVrinv(Y, sampleinfo$gender, geneinfo$spikectl)
fit.summary = ruv_summary(Y, fit, sampleinfo, geneinfo)
head(fit.summary$C)

ruv_hist(fit.summary)

ruv_ecdf(fit.summary)

ruv_ecdf(fit.summary, power=1/4)

genecoloring = list(
aes(color=genetype),
scale_color_manual(name="Gene Category", 
                   values=alpha(c("green", "gray", "yellow", "palevioletred1", "purple", "deepskyblue"), 
                                c( .2,.15,1, 1, 1, 1))))

ruv_ecdf(fit.summary) + genecoloring

ruv_rankplot(fit.summary, "pctl")  # "pctl" is a column in "geneinfo".  Genes from X/Y chrom.

ruv_rankplot(fit.summary, "pctl") + coord_cartesian(xlim=c(0,50), ylim=c(0,25))

ruv_projectionplot(fit.summary) + genecoloring

ruv_volcano(fit.summary) + genecoloring

ruv_varianceplot(fit.summary) + genecoloring

fit.summary.evar = ruv_summary(Y, fit, sampleinfo, geneinfo, p.type="evar")
ruv_varianceplot(fit.summary.evar) + genecoloring
```

# Did we help?

```{r}
# RUV4 with k = 0 for no adjustment
# Equivalent to a Limma Analysis
fit.unadj = RUV4(Y, sampleinfo$gender, geneinfo$spikectl, 0)       
fit.summary.unadj = ruv_summary(Y, fit.unadj, sampleinfo, geneinfo)  
# Make a list of plots to compare side-by-side
plots = list(
  ruv_hist(fit.summary.unadj),
  ruv_hist(fit.summary),
  ruv_rankplot(fit.summary.unadj, "pctl") + 
    coord_cartesian(xlim=c(0,50), ylim=c(0,25)),
  ruv_rankplot(fit.summary, "pctl") + 
    coord_cartesian(xlim=c(0,50), ylim=c(0,25))
)


grid.arrange(grobs=plots)
```

# Example Analyses (Global Adjustments)

## Example 1: Spike-in Negative Controls and Technical Replicates

```{r}
ruv_svdplot(Y) + gg_additions

M = replicate.matrix(sampleinfo[,c("patient", "region")])
YIII.spike.tech = RUVIII(Y, M, geneinfo$spikectl, k=10)

ruv_svdplot(YIII.spike.tech) + gg_additions

# This time, set average=TRUE
YIII.spike.tech.avg = RUVIII(Y, M, geneinfo$spikectl, k=10, average=TRUE)
# Create "metadata" for the rows of YIII.spike.tech.avg
sampleinfo.spike.tech.avg = collapse.replicates(sampleinfo, M)
head(sampleinfo.spike.tech.avg)

ruv_svdplot(YIII.spike.tech.avg) + 
  aes(color=sampleinfo.spike.tech.avg$region)
```


## Example 2: Plotting just the X/Y genes


```{r}
ruv_svdplot(Y[,geneinfo$pctl]) + gg_additions

gg_gender_region = list(aes(color=sampleinfo$region, 
                            shape=sampleinfo$gender, 
                            size=3, alpha=1, stroke=2), 
                        labs(color="Brain Region", 
                             shape="Gender"),
                        scale_size_identity(guide="none"),
                        scale_alpha(guide="none"),
                        scale_shape_manual(values = c("male" = 5, "female" = 3)),
                        theme(legend.text=element_text(size=12),
                              legend.title=element_text(size=16)),
                        guides(color = guide_legend(override.aes = list(size = 4)),
                               shape = guide_legend(override.aes = list(size = 4))),
                        scale_color_manual(values=c("darkorchid3", "darkorange2", "dodgerblue3"))
                       )

ruv_svdplot(Y[,geneinfo$pctl]) + gg_gender_region

ruv_svdplot(YIII.spike.tech[,geneinfo$pctl]) + gg_gender_region
```


## Example 3: Just the X/Y genes, Continued


```{r}
M = replicate.matrix(sampleinfo[,c("patient")])
YIII.hk.bio = RUVIII(Y, M, geneinfo$hkctl, k=10)

ruv_svdplot(YIII.hk.bio[,geneinfo$pctl]) + gg_gender_region

# Create a design matrix for brain region:
region_mat = design.matrix(sampleinfo$region)
# Regress it out from the "technical-adjusted" dataset
YIII.spike.tech.region_regression = residop(YIII.spike.tech, region_mat)

ruv_svdplot(YIII.spike.tech.region_regression[,geneinfo$pctl]) + gg_gender_region

gg_gender_region_nooutlier = list(aes(color=sampleinfo$region[-15], 
                            shape=sampleinfo$gender[-15], 
                            size=3, alpha=1, stroke=2), 
                        labs(color="Brain Region", 
                             shape="Gender"),
                        scale_size_identity(guide="none"),
                        scale_alpha(guide="none"),
                        scale_shape_manual(values = c("male" = 5, "female" = 3)),
                        theme(legend.text=element_text(size=12),
                              legend.title=element_text(size=16)),
                        guides(color = guide_legend(override.aes = list(size = 4)),
                               shape = guide_legend(override.aes = list(size = 4))),
                        scale_color_manual(values=c("darkorchid3", "darkorange2", "dodgerblue3"))
                       )

ruv_svdplot(YIII.spike.tech.region_regression[-15,geneinfo$pctl]) + gg_gender_region_nooutlier

ruv_svdplot(YIII.spike.tech.region_regression[-15,geneinfo$pctl], k=3:4) + gg_gender_region_nooutlier
```


## Final Example

```{r}
M = replicate.matrix(sampleinfo[,c("region")])
newY3 = RUVIII(Y, M, geneinfo$hkctl, k=10)

ruv_svdplot(newY3) + gg_additions

M = replicate.matrix(sampleinfo[,c("region")], burst=c("cerebellum", "D.L.P.F..cortex"))
newY3 = RUVIII(Y, M, geneinfo$hkctl, k=10)

ruv_svdplot(newY3) + gg_additions
```


## Examples with Shiny

### Balanced Design

```{r eval=FALSE}
library(ruv)
library(shiny)
library(colourpicker)
load("gender.rda")
Y = Y.norm
ruv_shiny(Y,sampleinfo,geneinfo,options=list(port=3840,host="0.0.0.0"))
```


### Imbalanced Design

```{r eval=FALSE}
keep = rep(T,nrow(Y))
keep[sampleinfo$lab=="Davis" & sampleinfo$gender=="male"] = FALSE
keep[sampleinfo$lab=="Michigan" & sampleinfo$gender=="female"] = FALSE
Y.imb = Y[keep,]
sampleinfo.imb = sampleinfo[keep,]
ruv_shiny(Y.imb,sampleinfo.imb,geneinfo,options=list(port=3840,host="0.0.0.0"))

keep = rep(T,nrow(Y))
keep[sampleinfo$lab=="Davis" & sampleinfo$gender=="male"] = FALSE
keep[sampleinfo$lab=="Michigan" & sampleinfo$gender=="female"] = FALSE
Y.imb = Y.raw[keep,]
sampleinfo.imb = sampleinfo[keep,]
ruv_shiny(Y.imb,sampleinfo.imb,geneinfo,options=list(port=3840,host="0.0.0.0"))
```


### Brain Region

```{r cache=FALSE, eval=FALSE}
ruv_shiny(Y.raw,sampleinfo,geneinfo,options=list(port=3840,host="0.0.0.0"))

newY = RUVI(Y.raw, 1, geneinfo$spikectl)
M = replicate.matrix(sampleinfo[,c("patient", "region")])
newY = RUVIII(newY, M, geneinfo$spikectl, k=4, average=TRUE)
newsampleinfo = collapse.replicates(sampleinfo, M)
fit = RUV4(newY, newsampleinfo$cortex, rep(TRUE,ncol(newY)), k=1)
fit = ruv_summary(newY, fit, newsampleinfo, geneinfo)

ruv_ecdf(fit, uniform.lines=seq(0,1,by=.1))

mean(fit$C$F.p > .25)
mean(fit$C$F.p.BH > .5)

ectl = colnames(newY) %in% rownames(fit$C)[fit$C$F.p.BH > .5]
geneinfo = cbind(geneinfo, neg.cer=ectl)

ruv_shiny(Y.raw, sampleinfo, geneinfo)
```

